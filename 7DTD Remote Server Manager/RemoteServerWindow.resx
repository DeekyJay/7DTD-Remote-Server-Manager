<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAGEPAABhDwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAHAAAADQAAABYAAAAfAAAAKwAA
        ADQAAAA7AAAAPQAAADsAAAA1AAAAKwAAACEAAAAWAAAADQAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAcAAAAPAAAAGQAA
        ACYAAAA0AAAAQAAAAEkAAABMAAAASgAAAEMAAAA3AAAAKgAAAB0AAAASAAAACgAAAAQAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAACAAA
        ABAAAAAcAAAAKwAAADoAAABJAAAAUwAAAFgAAABXAAAAUAAAAEMAAAA0AAAAJQAAABcAAAANAAAABgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAMAAAAIAAAAEQAAAB0AAAAtAAAAPQAAAE8AAABbAAAAYgAAAGIAAABbAAAATgAAAD0AAAAsAAAAHQAA
        ABEAAAAIAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAjWMIIc1jCDFNIogyDOHH8wyhR/QK3MbtB9RE5QAAABpAAAAagAAAGQAAABYAAAARwAA
        ADUAAAAkAAAAFgAAAAwAAAAFAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA2jyHGNo8h/zaPIf82jyH/No8h/zaPIf82jyH/No8h/x1NEpwAAABwAAAAbAAA
        AGEAAABQAAAAPgAAACsAAAAcAAAAEAAAAAcAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        HTYvfB1LK3MbUShrGVclYhdfI1sVZjCAHro2jyH/RZId/3agDf95oQv/eaEL/3mhC/95oQv/eaEL/1OW
        Gv82jyH/No8h/y99Hc4kXxaWAAAATAAAAEMAAAA5AAAALQAAACEAAAAXAAAAAAAAAAAAAAAAAAAAAAAA
        AAE2jiHHNo8h/zaPIf82jyH/No8h/zaPIf82jyH/No8h/zaPIf82jyH/RZId/3agDf95oQv/eaEL/3mh
        C/95oQv/eaEL/1+ZFv87kCD/No8h/zaPIf8zhh/TAAAANAAAACwAAAAjAAAAGgAAABIAAAAAAAAAAAAA
        AAAAAAAANo8hhDaPIf9Fkh3/SpQc/0qUHP9KlBz/SpQc/0qUHP9KlBz/SpQc/0qUHP9KlBz/V5cY/3mh
        C/95oQv/eaEL/3mhC/95oQv/eaEL/3agDf9jmhT/RZId/zaPIf8vfh2WAAAAIAAAABkAAAATAAAADQAA
        AAAAAAAAAAAAAAAAAAA2jyHBNo8h/2udEf95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/95oQv/eaEL/3mh
        C/95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/9rnRH/No8h/zSLIMcAAAAVAAAAEAAA
        AA0AAAAJAAAAAAAAAAAAAAAAAAAAADaPIcE2jyH/a50R/3mhC/95oQv/eaEL/3mhC/95oQv/eaEL/3mh
        C/95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/95oQv/eaEL/2udEf82jyH/NY0gxAAA
        AAwAAAAKAAAABwAAAAUAAAAAAAAAAAAAAAAAAAAANo8hwTaPIf9rnRH/eaEL/3mhC/95oQv/eaEL/3mh
        C/95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/95oQv/eaEL/3mhC/95oQv/a50R/zaP
        If82jiHCAAAABQAAAAQAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAA2jyGENo8h/1OWGv9bmBf/W5gX/1uY
        F/9bmBf/W5gX/1uYF/9bmBf/W5gX/1uYF/9bmBf/W5gX/1uYF/9bmBf/W5gX/1uYF/9bmBf/W5gX/1uY
        F/9Tlhr/No8h/zaPIYQAAAABAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAAADaPISQ2jyH2No8h/zaP
        If82jyH/No8h/zaPIf82jyH/No8h/zaPIf82jyH/No8h/zaPIf82jyH/No8h/zaPIf82jyH/No8h/zaP
        If82jyH/No8h/zaPIf82jyH2No8hJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaP
        ISQ2jyFgNo8hgTaPIYE2jyGBNo8hgTaPIYE2jyGBNo8hgTaPIYE2jyGBNo8hgTaPIYE2jyGBNo8hgTaP
        IYE2jyGBNo8hgTaPIYE2jyGBNo8hYDaPISQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/wAAP/8AAD//AAA//wAAH/8AAA//AAAP/gAAB/4AAAP+AAAB/wAAAPwA
        AAD4AAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAA
        AADwAAAP+AAAH/////////////////////8=
</value>
  </data>
</root>